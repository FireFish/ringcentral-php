<?php
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/**
 *
 * NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
 */

//namespace SwaggerClient;
namespace RC\client;

class ClientApplicationInfoApi {

  function __construct($apiClient = null) {
    $this->apiClient = $apiClient;
  }

  /**
   * @var ApiClient
   */
  private $apiClient;

  /**
   * get the API client
   */
  public function getApiClient() {
    return $this->apiClient;
  }

  /**
   * set the API client
   */
  public function setApiClient($apiClient) {
    $this->apiClient = $apiClient;
  }

  
  /**
   * Get Client Info
   *
   * @param `Options` $options Options object
   *
   * @struct Options {
   * }
   *
   * @return \RC\client\models\ClientApiResponse
   */
   //public function clientInfo() {
   public function clientInfo($options) {

      if (empty($options)) $options = [];

      

      // parse inputs
      $resourcePath = "/v1.0/client-info";
      $resourcePath = str_replace("{format}", "json", $resourcePath);
      $method = "GET";
      $httpBody = '';
      $queryParams = array();
      $headerParams = array();
      $formParams = array();

      $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
      if (!is_null($_header_accept)) {
        $headerParams['Accept'] = $_header_accept;
      }
      $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

      

      

      

      

      

      // for model (json/xml)
      if (isset($_tempBody)) {
        $httpBody = $_tempBody; // $_tempBody is the method argument, if present
      } else if (count($formParams) > 0) {
        // for HTTP post (form)
        $httpBody = $formParams;
      }

      // authentication setting, if any
      $authSettings = array();

      // make the API Call
      $response = $this->apiClient->callAPI($resourcePath, $method,
                                            $queryParams, $httpBody,
                                            $headerParams, $authSettings);

      if(! $response) {
        return null;
      }

      $responseObject = $this->apiClient->deserialize($response,'ClientApiResponse');
      return $responseObject;

  }
  
  /**
   * Create/Update Custom Data
   *
   * @param `Options` $options Options object
   *
   * @struct Options {
   *     @type string  'my_custom_key'  Custom data access key. The number of unique custom data keys is limited to 100 keys per extension, summarized for all the applications. For example, if you have created 50 custom data keys under the Android mobile client application for the particular extension, then logged in the iOS application and created another 50 keys, the web client application won&#39;t be allowed to create any custom data key for that extension. (required)
   *     @type CustomDataRequest  'body'  JSON body (required)
   * }
   *
   * @return \RC\client\models\CustomDataApiResponse
   */
   //public function clientInfoPut($my_custom_key, $body) {
   public function clientInfoPut($options) {

      if (empty($options)) $options = [];

      
      // verify the required parameter 'my_custom_key' is set
      $this->apiClient->validateParameter($options, 'my_custom_key', 'clientInfoPut');
      
      // verify the required parameter 'body' is set
      $this->apiClient->validateParameter($options, 'body', 'clientInfoPut');
      

      // parse inputs
      $resourcePath = "/v1.0/client-info/custom-data/{my-custom-key}";
      $resourcePath = str_replace("{format}", "json", $resourcePath);
      $method = "PUT";
      $httpBody = '';
      $queryParams = array();
      $headerParams = array();
      $formParams = array();

      $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
      if (!is_null($_header_accept)) {
        $headerParams['Accept'] = $_header_accept;
      }
      $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

      

      

      $resourcePath = $this->apiClient->parsePathParam($resourcePath, $options, 'my_custom_key', 'my-custom-key');
      

      

      // body params
      $_tempBody = null;
      if (isset($body)) {
        $_tempBody = $body;
      }

      // for model (json/xml)
      if (isset($_tempBody)) {
        $httpBody = $_tempBody; // $_tempBody is the method argument, if present
      } else if (count($formParams) > 0) {
        // for HTTP post (form)
        $httpBody = $formParams;
      }

      // authentication setting, if any
      $authSettings = array();

      // make the API Call
      $response = $this->apiClient->callAPI($resourcePath, $method,
                                            $queryParams, $httpBody,
                                            $headerParams, $authSettings);

      if(! $response) {
        return null;
      }

      $responseObject = $this->apiClient->deserialize($response,'CustomDataApiResponse');
      return $responseObject;

  }
  

}
