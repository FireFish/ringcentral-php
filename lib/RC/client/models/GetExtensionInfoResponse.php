<?php
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/**
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
 *
 */

//namespace SwaggerClient\models;
namespace RC\client\models;

use \ArrayAccess;

class GetExtensionInfoResponse implements ArrayAccess {
  static $swaggerTypes = array(
      'id' => 'string',
      'uri' => 'string',
      'contact' => 'ContactInfo',
      'departments' => 'DepartmentInfo',
      'extension_number' => 'string',
      'name' => 'string',
      'partner_id' => 'string',
      'permissions' => 'ExtensionPermissions',
      'regional_settings' => 'RegionalSettingsInfo',
      'service_features' => 'array[ExtensionServiceFeatureInfo]',
      'setup_wizard_state' => 'string',
      'status' => 'string',
      'status_info' => 'ExtensionStatusInfo',
      'type' => 'string'
  );

  static $attributeMap = array(
      'id' => 'id',
      'uri' => 'uri',
      'contact' => 'contact',
      'departments' => 'departments',
      'extension_number' => 'extensionNumber',
      'name' => 'name',
      'partner_id' => 'partnerId',
      'permissions' => 'permissions',
      'regional_settings' => 'regionalSettings',
      'service_features' => 'serviceFeatures',
      'setup_wizard_state' => 'setupWizardState',
      'status' => 'status',
      'status_info' => 'statusInfo',
      'type' => 'type'
  );

  
  /**
  * Internal identifier of an extension
  * @var string
  */
  public $id;
  /**
  * Canonical URI of an extension
  * @var string
  */
  public $uri;
  /**
  * Contact detailed information
  * @var ContactInfo
  */
  public $contact;
  /**
  * Information on department extension(s), to which the requested extension belongs. Returned only for user extensions, members of department, requested by single extensionId
  * @var DepartmentInfo
  */
  public $departments;
  /**
  * Number of department extension
  * @var string
  */
  public $extension_number;
  /**
  * Extension user name
  * @var string
  */
  public $name;
  /**
  * For Partner Applications Internal identifier of an extension created by partner. The RingCentral supports the mapping of accounts and stores the corresponding accountId/extensionId for each partnerId of a client application. In request URIs partnerIds are accepted instead of regular RingCentral native IDs as path parameters using pid = XXX clause. Though in response URIs contain the corresponding accountIds and extensionIds. In all request and response bodies these values are reflected via  partnerId  attributes of account and extension
  * @var string
  */
  public $partner_id;
  /**
  * Extension permissions, corresponding to the Service Web permissions 'Admin' and 'InternationalCalling'
  * @var ExtensionPermissions
  */
  public $permissions;
  /**
  * Extension region data (timezone, home country, language)
  * @var RegionalSettingsInfo
  */
  public $regional_settings;
  public $service_features;
  /**
  * Specifies extension configuration wizard state (web service setup). The default value is 'NotStarted'
  * @var string
  */
  public $setup_wizard_state;
  /**
  * Extension current state
  * @var string
  */
  public $status;
  /**
  * Status information (reason, comment). Returned for 'Disabled' status only
  * @var ExtensionStatusInfo
  */
  public $status_info;
  /**
  * Extension type
  * @var string
  */
  public $type;

  public function __construct(array $data = null) {
    $this->id = $data["id"];
    $this->uri = $data["uri"];
    $this->contact = $data["contact"];
    $this->departments = $data["departments"];
    $this->extension_number = $data["extension_number"];
    $this->name = $data["name"];
    $this->partner_id = $data["partner_id"];
    $this->permissions = $data["permissions"];
    $this->regional_settings = $data["regional_settings"];
    $this->service_features = $data["service_features"];
    $this->setup_wizard_state = $data["setup_wizard_state"];
    $this->status = $data["status"];
    $this->status_info = $data["status_info"];
    $this->type = $data["type"];
  }

  public function offsetExists($offset) {
    return isset($this->$offset);
  }

  public function offsetGet($offset) {
    return $this->$offset;
  }

  public function offsetSet($offset, $value) {
    $this->$offset = $value;
  }

  public function offsetUnset($offset) {
    unset($this->$offset);
  }
}
