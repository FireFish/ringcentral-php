<?php
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/**
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
 *
 */

//namespace SwaggerClient\models;
namespace RC\client\models;

use \ArrayAccess;

class GetMessageInfoResponse implements ArrayAccess {
  static $swaggerTypes = array(
      'id' => 'string',
      'uri' => 'string',
      'attachments' => 'array[MessageAttachmentInfo]',
      'availability' => 'string',
      'conversation_id' => 'int',
      'delivery_error_code' => 'string',
      'direction' => 'string',
      'fax_page_count' => 'int',
      'fax_resolution' => 'string',
      'from' => 'MessageStoreCallerInfo',
      'message_status' => 'string',
      'pg_to_department' => 'boolean',
      'priority' => 'string',
      'read_status' => 'string',
      'sms_sending_attempts_count' => 'int',
      'subject' => 'string',
      'to' => 'MessageStoreCallerInfo',
      'type' => 'string',
      'vm_transcription_status' => 'string'
  );

  static $attributeMap = array(
      'id' => 'id',
      'uri' => 'uri',
      'attachments' => 'attachments',
      'availability' => 'availability',
      'conversation_id' => 'conversationId',
      'delivery_error_code' => 'deliveryErrorCode',
      'direction' => 'direction',
      'fax_page_count' => 'faxPageCount',
      'fax_resolution' => 'faxResolution',
      'from' => 'from',
      'message_status' => 'messageStatus',
      'pg_to_department' => 'pgToDepartment',
      'priority' => 'priority',
      'read_status' => 'readStatus',
      'sms_sending_attempts_count' => 'smsSendingAttemptsCount',
      'subject' => 'subject',
      'to' => 'to',
      'type' => 'type',
      'vm_transcription_status' => 'vmTranscriptionStatus'
  );

  
  /**
  * Internal identifier of a message
  * @var string
  */
  public $id;
  /**
  * Canonical URI of a message
  * @var string
  */
  public $uri;
  public $attachments;
  /**
  * Message availability status. Message in 'Deleted' state is still preserved with all its attachments and can be restored. 'Purged' means that all attachments are already deleted and the message itself is about to be physically deleted shortly
  * @var string
  */
  public $availability;
  /**
  * SMS and Pager only. Identifier of the conversation the message belongs to
  * @var int
  */
  public $conversation_id;
  /**
  * SMS only. Delivery error code returned by gateway
  * @var string
  */
  public $delivery_error_code;
  /**
  * Message direction. Note that for some message types not all directions are allowed. For example voicemail messages can be only inbound
  * @var string
  */
  public $direction;
  /**
  * Fax only. Page count in fax message
  * @var int
  */
  public $fax_page_count;
  /**
  * Fax only. Resolution of fax message. ('High' for black and white image scanned at 200 dpi, 'Low' for black and white image scanned at 100 dpi)
  * @var string
  */
  public $fax_resolution;
  /**
  * Sender information
  * @var MessageStoreCallerInfo
  */
  public $from;
  /**
  * Message status. Different message types may have different allowed status values.For outbound faxes the aggregated message status is returned: If status for at least one recipient is 'Queued', then 'Queued' value is returned If status for at least one recipient is 'SendingFailed', then 'SendingFailed' value is returned In other cases Sent status is returned
  * @var string
  */
  public $message_status;
  /**
  * Pager only. True if at least one of the message recipients is Department extension
  * @var boolean
  */
  public $pg_to_department;
  /**
  * Message priority
  * @var string
  */
  public $priority;
  /**
  * Message read status
  * @var string
  */
  public $read_status;
  /**
  * SMS only. Number of attempts made to send an outbound SMS to the gateway (if gateway is temporary unavailable)
  * @var int
  */
  public $sms_sending_attempts_count;
  /**
  * Message subject. For SMS and Pager messages it replicates message text which is also returned as an attachment
  * @var string
  */
  public $subject;
  /**
  * Recipient information
  * @var MessageStoreCallerInfo
  */
  public $to;
  /**
  * Message type
  * @var string
  */
  public $type;
  /**
  * Voicemail only. Status of voicemail to text transcription. If VoicemailToText feature is not activated for account, the 'NotAvailable' value is returned
  * @var string
  */
  public $vm_transcription_status;

  public function __construct(array $data = null) {
    $this->id = $data["id"];
    $this->uri = $data["uri"];
    $this->attachments = $data["attachments"];
    $this->availability = $data["availability"];
    $this->conversation_id = $data["conversation_id"];
    $this->delivery_error_code = $data["delivery_error_code"];
    $this->direction = $data["direction"];
    $this->fax_page_count = $data["fax_page_count"];
    $this->fax_resolution = $data["fax_resolution"];
    $this->from = $data["from"];
    $this->message_status = $data["message_status"];
    $this->pg_to_department = $data["pg_to_department"];
    $this->priority = $data["priority"];
    $this->read_status = $data["read_status"];
    $this->sms_sending_attempts_count = $data["sms_sending_attempts_count"];
    $this->subject = $data["subject"];
    $this->to = $data["to"];
    $this->type = $data["type"];
    $this->vm_transcription_status = $data["vm_transcription_status"];
  }

  public function offsetExists($offset) {
    return isset($this->$offset);
  }

  public function offsetGet($offset) {
    return $this->$offset;
  }

  public function offsetSet($offset, $value) {
    $this->$offset = $value;
  }

  public function offsetUnset($offset) {
    unset($this->$offset);
  }
}
