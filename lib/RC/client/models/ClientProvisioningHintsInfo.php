<?php
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/**
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
 *
 */

//namespace SwaggerClient\models;
namespace RC\client\models;

use \ArrayAccess;

class ClientProvisioningHintsInfo implements ArrayAccess {
  static $swaggerTypes = array(
      'trial_state' => 'ClientProvisioningHintInfo',
      'user_credential_state' => 'ClientProvisioningHintInfo',
      'app_version_upgrade' => 'ClientProvisioningHintInfo'
  );

  static $attributeMap = array(
      'trial_state' => 'trialState',
      'user_credential_state' => 'userCredentialState',
      'app_version_upgrade' => 'appVersionUpgrade'
  );

  
  /**
  * Trial account expiration. Returned for trial accounts only
  * @var ClientProvisioningHintInfo
  */
  public $trial_state;
  /**
  * User credentials expiration
  * @var ClientProvisioningHintInfo
  */
  public $user_credential_state;
  /**
  * Application version update. Returned only if the client current version is older than the latest version. 'actionRequired': 'true' means the application requires force updating to the latest version
  * @var ClientProvisioningHintInfo
  */
  public $app_version_upgrade;

  public function __construct(array $data = null) {
    $this->trial_state = $data["trial_state"];
    $this->user_credential_state = $data["user_credential_state"];
    $this->app_version_upgrade = $data["app_version_upgrade"];
  }

  public function offsetExists($offset) {
    return isset($this->$offset);
  }

  public function offsetGet($offset) {
    return $this->$offset;
  }

  public function offsetSet($offset, $value) {
    $this->$offset = $value;
  }

  public function offsetUnset($offset) {
    unset($this->$offset);
  }
}
