<?php
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/**
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
 *
 */

//namespace SwaggerClient\models;
namespace RC\client\models;

use \ArrayAccess;

class PagingInfo implements ArrayAccess {
  static $swaggerTypes = array(
      'page' => 'int',
      'per_page' => 'int',
      'page_start' => 'int',
      'page_end' => 'int',
      'total_pages' => 'int',
      'total_elements' => 'int'
  );

  static $attributeMap = array(
      'page' => 'page',
      'per_page' => 'perPage',
      'page_start' => 'pageStart',
      'page_end' => 'pageEnd',
      'total_pages' => 'totalPages',
      'total_elements' => 'totalElements'
  );

  
  /**
  * The current page number. 1-indexed, so the first page is 1 by default. May be omitted if result is empty (because non-existent page was specified or perPage=0 was requested)
  * @var int
  */
  public $page;
  /**
  * Current page size, describes how many items are in each page. Default value is 100. Maximum value is 1000. If perPage value in the request is greater than 1000, the maximum value (1000) is applied
  * @var int
  */
  public $per_page;
  /**
  * The zero-based number of the first element on the current page. Omitted if the page is omitted or result is empty
  * @var int
  */
  public $page_start;
  /**
  * The zero-based index of the last element on the current page. Omitted if the page is omitted or result is empty
  * @var int
  */
  public $page_end;
  /**
  * The total number of pages in a dataset. May be omitted for some resources due to performance reasons
  * @var int
  */
  public $total_pages;
  /**
  * The total number of elements in a dataset. May be omitted for some resource due to performance reasons
  * @var int
  */
  public $total_elements;

  public function __construct(array $data = null) {
    $this->page = $data["page"];
    $this->per_page = $data["per_page"];
    $this->page_start = $data["page_start"];
    $this->page_end = $data["page_end"];
    $this->total_pages = $data["total_pages"];
    $this->total_elements = $data["total_elements"];
  }

  public function offsetExists($offset) {
    return isset($this->$offset);
  }

  public function offsetGet($offset) {
    return $this->$offset;
  }

  public function offsetSet($offset, $value) {
    $this->$offset = $value;
  }

  public function offsetUnset($offset) {
    unset($this->$offset);
  }
}
