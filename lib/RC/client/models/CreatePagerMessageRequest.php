<?php
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/**
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
 *
 */

//namespace SwaggerClient\models;
namespace RC\client\models;

use \ArrayAccess;

class CreatePagerMessageRequest implements ArrayAccess {
  static $swaggerTypes = array(
      'from' => 'MessageStoreCallerInfo',
      'reply_on' => 'int',
      'text' => 'string',
      'to' => 'MessageStoreCallerInfo'
  );

  static $attributeMap = array(
      'from' => 'from',
      'reply_on' => 'replyOn',
      'text' => 'text',
      'to' => 'to'
  );

  
  /**
  * Sender of pager message. The extensionNumber property must be filled
  * @var MessageStoreCallerInfo
  */
  public $from;
  /**
  * Optional. ID of a message this message replies to
  * @var int
  */
  public $reply_on;
  /**
  * Text of pager message
  * @var string
  */
  public $text;
  /**
  * Receiver of pager message. The extensionNumber property must be filled
  * @var MessageStoreCallerInfo
  */
  public $to;

  public function __construct(array $data = null) {
    $this->from = $data["from"];
    $this->reply_on = $data["reply_on"];
    $this->text = $data["text"];
    $this->to = $data["to"];
  }

  public function offsetExists($offset) {
    return isset($this->$offset);
  }

  public function offsetGet($offset) {
    return $this->$offset;
  }

  public function offsetSet($offset, $value) {
    $this->$offset = $value;
  }

  public function offsetUnset($offset) {
    unset($this->$offset);
  }
}
