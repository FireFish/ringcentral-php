<?php
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/**
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
 *
 */

//namespace SwaggerClient\models;
namespace RC\client\models;

use \ArrayAccess;

class CreateSubscriptionRequest implements ArrayAccess {
  static $swaggerTypes = array(
      'event_filters' => 'string',
      'delivery_mode' => 'array[null]',
      'transport_type' => 'string',
      'encryption' => 'string'
  );

  static $attributeMap = array(
      'event_filters' => 'eventFilters',
      'delivery_mode' => 'deliveryMode',
      'transport_type' => 'transportType',
      'encryption' => 'encryption'
  );

  
  /**
  * Mandatory. Collection of URIs to API resources (see Event Types for details). For APNS transport type only message event filter is available
  * @var string
  */
  public $event_filters;
  public $delivery_mode;
  /**
  * Notifications transportation provider name. 'APNS' (Apple Push Notifications Service)
  * @var string
  */
  public $transport_type;
  /**
  * Optional parameter. Specifies if the message will be encrypted or not. If request contains any presence event filter the value by default is 'true' (even if specified as 'false'). If request contains only message event filters the value by default is 'false'
  * @var string
  */
  public $encryption;

  public function __construct(array $data = null) {
    $this->event_filters = $data["event_filters"];
    $this->delivery_mode = $data["delivery_mode"];
    $this->transport_type = $data["transport_type"];
    $this->encryption = $data["encryption"];
  }

  public function offsetExists($offset) {
    return isset($this->$offset);
  }

  public function offsetGet($offset) {
    return $this->$offset;
  }

  public function offsetSet($offset, $value) {
    $this->$offset = $value;
  }

  public function offsetUnset($offset) {
    unset($this->$offset);
  }
}
