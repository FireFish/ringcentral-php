<?php
/**
 *  Copyright 2015 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/**
 *
 * NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
 */

//namespace SwaggerClient;
namespace RC\client;

class MessagesApi {

  function __construct($apiClient = null) {
    $this->apiClient = $apiClient;
  }

  /**
   * @var ApiClient
   */
  private $apiClient;

  /**
   * get the API client
   */
  public function getApiClient() {
    return $this->apiClient;
  }

  /**
   * set the API client
   */
  public function setApiClient($apiClient) {
    $this->apiClient = $apiClient;
  }

  
  /**
   * Create Pager Message
   *
   * @param `Options` $options Options object
   *
   * @struct Options {
   *     @type string  'account_id'  Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
   *     @type string  'extension_id'  Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
   *     @type CreatePagerMessageRequest  'body'  JSON body (required)
   * }
   *
   * @return \RC\client\models\CreatePagerMessageResponse
   */
   //public function accountExtensionCompanyPagerPost($account_id, $extension_id, $body) {
   public function accountExtensionCompanyPagerPost($options) {

      if (empty($options)) $options = [];

      
      // verify the required parameter 'account_id' is set
      $this->apiClient->validateParameter($options, 'account_id', 'accountExtensionCompanyPagerPost');
      
      // verify the required parameter 'extension_id' is set
      $this->apiClient->validateParameter($options, 'extension_id', 'accountExtensionCompanyPagerPost');
      
      // verify the required parameter 'body' is set
      $this->apiClient->validateParameter($options, 'body', 'accountExtensionCompanyPagerPost');
      

      // parse inputs
      $resourcePath = "/v1.0/account/{accountId}/extension/{extensionId}/company-pager";
      $resourcePath = str_replace("{format}", "json", $resourcePath);
      $method = "POST";
      $httpBody = '';
      $queryParams = array();
      $headerParams = array();
      $formParams = array();

      $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
      if (!is_null($_header_accept)) {
        $headerParams['Accept'] = $_header_accept;
      }
      $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

      

      

      $resourcePath = $this->apiClient->parsePathParam($resourcePath, $options, 'account_id', 'accountId');
      $resourcePath = $this->apiClient->parsePathParam($resourcePath, $options, 'extension_id', 'extensionId');
      

      

      // body params
      $_tempBody = null;
      if (isset($body)) {
        $_tempBody = $body;
      }

      // for model (json/xml)
      if (isset($_tempBody)) {
        $httpBody = $_tempBody; // $_tempBody is the method argument, if present
      } else if (count($formParams) > 0) {
        // for HTTP post (form)
        $httpBody = $formParams;
      }

      // authentication setting, if any
      $authSettings = array();

      // make the API Call
      $response = $this->apiClient->callAPI($resourcePath, $method,
                                            $queryParams, $httpBody,
                                            $headerParams, $authSettings);

      if(! $response) {
        return null;
      }

      $responseObject = $this->apiClient->deserialize($response,'CreatePagerMessageResponse');
      return $responseObject;

  }
  
  /**
   * Create Fax Message
   *
   * @param `Options` $options Options object
   *
   * @struct Options {
   *     @type string  'account_id'  Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
   *     @type string  'extension_id'  Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
   *     @type CreateFaxMessageRequest  'body'  JSON body (required)
   * }
   *
   * @return \RC\client\models\GetMessageInfoResponse
   */
   //public function accountExtensionFaxPost($account_id, $extension_id, $body) {
   public function accountExtensionFaxPost($options) {

      if (empty($options)) $options = [];

      
      // verify the required parameter 'account_id' is set
      $this->apiClient->validateParameter($options, 'account_id', 'accountExtensionFaxPost');
      
      // verify the required parameter 'extension_id' is set
      $this->apiClient->validateParameter($options, 'extension_id', 'accountExtensionFaxPost');
      
      // verify the required parameter 'body' is set
      $this->apiClient->validateParameter($options, 'body', 'accountExtensionFaxPost');
      

      // parse inputs
      $resourcePath = "/v1.0/account/{accountId}/extension/{extensionId}/fax";
      $resourcePath = str_replace("{format}", "json", $resourcePath);
      $method = "POST";
      $httpBody = '';
      $queryParams = array();
      $headerParams = array();
      $formParams = array();

      $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
      if (!is_null($_header_accept)) {
        $headerParams['Accept'] = $_header_accept;
      }
      $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

      

      

      $resourcePath = $this->apiClient->parsePathParam($resourcePath, $options, 'account_id', 'accountId');
      $resourcePath = $this->apiClient->parsePathParam($resourcePath, $options, 'extension_id', 'extensionId');
      

      

      // body params
      $_tempBody = null;
      if (isset($body)) {
        $_tempBody = $body;
      }

      // for model (json/xml)
      if (isset($_tempBody)) {
        $httpBody = $_tempBody; // $_tempBody is the method argument, if present
      } else if (count($formParams) > 0) {
        // for HTTP post (form)
        $httpBody = $formParams;
      }

      // authentication setting, if any
      $authSettings = array();

      // make the API Call
      $response = $this->apiClient->callAPI($resourcePath, $method,
                                            $queryParams, $httpBody,
                                            $headerParams, $authSettings);

      if(! $response) {
        return null;
      }

      $responseObject = $this->apiClient->deserialize($response,'GetMessageInfoResponse');
      return $responseObject;

  }
  
  /**
   * Get Message List
   *
   * @param `Options` $options Options object
   *
   * @struct Options {
   *     @type string  'account_id'  Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
   *     @type string  'extension_id'  Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
   *     @type array[string]  'availability'  Specifies the availability status for the resulting messages. Default value is &#39;Alive&#39;. Multiple values are accepted (required)
   *     @type int  'conversation_id'  Specifies the conversation identifier for the resulting messages (required)
   *     @type string  'date_from'  The start timestamp for the resulting messages. Default value is equal to dateTo minus 1 week (required)
   *     @type string  'date_to'  Specifies the ending timestamp for the resulting messages. Default: current time (required)
   *     @type array[string]  'direction'  The direction for the resulting messages. If not specified, both inbound and outbound messages are returned. Multiple values are accepted (required)
   *     @type array[string]  'message_type'  The type of the resulting messages. If not specified, all messages without message type filtering are returned. Multiple values are accepted (required)
   *     @type array[string]  'read_status'  The read status for the resulting messages. Multiple values are accepted (required)
   *     @type int  'page'  Indicates the page number to retrieve. Only positive number values are allowed. Default value is &#39;1&#39; (required)
   *     @type int  'per_page'  Indicates the page size (number of items). If not specified, the value is &#39;100&#39; by default (required)
   *     @type string  'phone_number'  The phone number. If specified, messages are returned for this particular phone number only (required)
   * }
   *
   * @return \RC\client\models\GetMessageList
   */
   //public function accountExtensionMessageStores($account_id, $extension_id, $availability, $conversation_id, $date_from, $date_to, $direction, $message_type, $read_status, $page, $per_page, $phone_number) {
   public function accountExtensionMessageStores($options) {

      if (empty($options)) $options = [];

      
      // verify the required parameter 'account_id' is set
      $this->apiClient->validateParameter($options, 'account_id', 'accountExtensionMessageStores');
      
      // verify the required parameter 'extension_id' is set
      $this->apiClient->validateParameter($options, 'extension_id', 'accountExtensionMessageStores');
      

      // parse inputs
      $resourcePath = "/v1.0/account/{accountId}/extension/{extensionId}/message-store";
      $resourcePath = str_replace("{format}", "json", $resourcePath);
      $method = "GET";
      $httpBody = '';
      $queryParams = array();
      $headerParams = array();
      $formParams = array();

      $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
      if (!is_null($_header_accept)) {
        $headerParams['Accept'] = $_header_accept;
      }
      $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

      $queryParams = $this->apiClient->parseQueryParam($queryParams, $options, 'availability', 'availability');
      $queryParams = $this->apiClient->parseQueryParam($queryParams, $options, 'conversation_id', 'conversationId');
      $queryParams = $this->apiClient->parseQueryParam($queryParams, $options, 'date_from', 'dateFrom');
      $queryParams = $this->apiClient->parseQueryParam($queryParams, $options, 'date_to', 'dateTo');
      $queryParams = $this->apiClient->parseQueryParam($queryParams, $options, 'direction', 'direction');
      $queryParams = $this->apiClient->parseQueryParam($queryParams, $options, 'message_type', 'messageType');
      $queryParams = $this->apiClient->parseQueryParam($queryParams, $options, 'read_status', 'readStatus');
      $queryParams = $this->apiClient->parseQueryParam($queryParams, $options, 'page', 'page');
      $queryParams = $this->apiClient->parseQueryParam($queryParams, $options, 'per_page', 'perPage');
      $queryParams = $this->apiClient->parseQueryParam($queryParams, $options, 'phone_number', 'phoneNumber');
      

      

      $resourcePath = $this->apiClient->parsePathParam($resourcePath, $options, 'account_id', 'accountId');
      $resourcePath = $this->apiClient->parsePathParam($resourcePath, $options, 'extension_id', 'extensionId');
      

      

      

      // for model (json/xml)
      if (isset($_tempBody)) {
        $httpBody = $_tempBody; // $_tempBody is the method argument, if present
      } else if (count($formParams) > 0) {
        // for HTTP post (form)
        $httpBody = $formParams;
      }

      // authentication setting, if any
      $authSettings = array();

      // make the API Call
      $response = $this->apiClient->callAPI($resourcePath, $method,
                                            $queryParams, $httpBody,
                                            $headerParams, $authSettings);

      if(! $response) {
        return null;
      }

      $responseObject = $this->apiClient->deserialize($response,'GetMessageList');
      return $responseObject;

  }
  
  /**
   * Get Message Info
   *
   * @param `Options` $options Options object
   *
   * @struct Options {
   *     @type string  'account_id'  Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
   *     @type string  'extension_id'  Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
   *     @type int  'message_id'  Internal identifier of a message (required)
   * }
   *
   * @return \RC\client\models\GetMessageInfoResponse
   */
   //public function accountExtensionMessageStore($account_id, $extension_id, $message_id) {
   public function accountExtensionMessageStore($options) {

      if (empty($options)) $options = [];

      
      // verify the required parameter 'account_id' is set
      $this->apiClient->validateParameter($options, 'account_id', 'accountExtensionMessageStore');
      
      // verify the required parameter 'extension_id' is set
      $this->apiClient->validateParameter($options, 'extension_id', 'accountExtensionMessageStore');
      
      // verify the required parameter 'message_id' is set
      $this->apiClient->validateParameter($options, 'message_id', 'accountExtensionMessageStore');
      

      // parse inputs
      $resourcePath = "/v1.0/account/{accountId}/extension/{extensionId}/message-store/{messageId}";
      $resourcePath = str_replace("{format}", "json", $resourcePath);
      $method = "GET";
      $httpBody = '';
      $queryParams = array();
      $headerParams = array();
      $formParams = array();

      $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
      if (!is_null($_header_accept)) {
        $headerParams['Accept'] = $_header_accept;
      }
      $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

      

      

      $resourcePath = $this->apiClient->parsePathParam($resourcePath, $options, 'account_id', 'accountId');
      $resourcePath = $this->apiClient->parsePathParam($resourcePath, $options, 'extension_id', 'extensionId');
      $resourcePath = $this->apiClient->parsePathParam($resourcePath, $options, 'message_id', 'messageId');
      

      

      

      // for model (json/xml)
      if (isset($_tempBody)) {
        $httpBody = $_tempBody; // $_tempBody is the method argument, if present
      } else if (count($formParams) > 0) {
        // for HTTP post (form)
        $httpBody = $formParams;
      }

      // authentication setting, if any
      $authSettings = array();

      // make the API Call
      $response = $this->apiClient->callAPI($resourcePath, $method,
                                            $queryParams, $httpBody,
                                            $headerParams, $authSettings);

      if(! $response) {
        return null;
      }

      $responseObject = $this->apiClient->deserialize($response,'GetMessageInfoResponse');
      return $responseObject;

  }
  
  /**
   * Update Message
   *
   * @param `Options` $options Options object
   *
   * @struct Options {
   *     @type string  'account_id'  Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
   *     @type string  'extension_id'  Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
   *     @type int  'message_id'  Internal identifier of a message (required)
   *     @type UpdateMessageRequest  'body'  JSON body (required)
   * }
   *
   * @return \RC\client\models\GetMessageInfoResponse
   */
   //public function accountExtensionMessageStorePut($account_id, $extension_id, $message_id, $body) {
   public function accountExtensionMessageStorePut($options) {

      if (empty($options)) $options = [];

      
      // verify the required parameter 'account_id' is set
      $this->apiClient->validateParameter($options, 'account_id', 'accountExtensionMessageStorePut');
      
      // verify the required parameter 'extension_id' is set
      $this->apiClient->validateParameter($options, 'extension_id', 'accountExtensionMessageStorePut');
      
      // verify the required parameter 'message_id' is set
      $this->apiClient->validateParameter($options, 'message_id', 'accountExtensionMessageStorePut');
      
      // verify the required parameter 'body' is set
      $this->apiClient->validateParameter($options, 'body', 'accountExtensionMessageStorePut');
      

      // parse inputs
      $resourcePath = "/v1.0/account/{accountId}/extension/{extensionId}/message-store/{messageId}";
      $resourcePath = str_replace("{format}", "json", $resourcePath);
      $method = "PUT";
      $httpBody = '';
      $queryParams = array();
      $headerParams = array();
      $formParams = array();

      $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
      if (!is_null($_header_accept)) {
        $headerParams['Accept'] = $_header_accept;
      }
      $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

      

      

      $resourcePath = $this->apiClient->parsePathParam($resourcePath, $options, 'account_id', 'accountId');
      $resourcePath = $this->apiClient->parsePathParam($resourcePath, $options, 'extension_id', 'extensionId');
      $resourcePath = $this->apiClient->parsePathParam($resourcePath, $options, 'message_id', 'messageId');
      

      

      // body params
      $_tempBody = null;
      if (isset($body)) {
        $_tempBody = $body;
      }

      // for model (json/xml)
      if (isset($_tempBody)) {
        $httpBody = $_tempBody; // $_tempBody is the method argument, if present
      } else if (count($formParams) > 0) {
        // for HTTP post (form)
        $httpBody = $formParams;
      }

      // authentication setting, if any
      $authSettings = array();

      // make the API Call
      $response = $this->apiClient->callAPI($resourcePath, $method,
                                            $queryParams, $httpBody,
                                            $headerParams, $authSettings);

      if(! $response) {
        return null;
      }

      $responseObject = $this->apiClient->deserialize($response,'GetMessageInfoResponse');
      return $responseObject;

  }
  
  /**
   * Delete Message
   *
   * @param `Options` $options Options object
   *
   * @struct Options {
   *     @type string  'account_id'  Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
   *     @type string  'extension_id'  Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
   *     @type int  'message_id'  Internal identifier of a message (required)
   * }
   *
   * @return \RC\client\models\GetMessageInfoResponse
   */
   //public function accountExtensionMessageStoreDelete($account_id, $extension_id, $message_id) {
   public function accountExtensionMessageStoreDelete($options) {

      if (empty($options)) $options = [];

      
      // verify the required parameter 'account_id' is set
      $this->apiClient->validateParameter($options, 'account_id', 'accountExtensionMessageStoreDelete');
      
      // verify the required parameter 'extension_id' is set
      $this->apiClient->validateParameter($options, 'extension_id', 'accountExtensionMessageStoreDelete');
      
      // verify the required parameter 'message_id' is set
      $this->apiClient->validateParameter($options, 'message_id', 'accountExtensionMessageStoreDelete');
      

      // parse inputs
      $resourcePath = "/v1.0/account/{accountId}/extension/{extensionId}/message-store/{messageId}";
      $resourcePath = str_replace("{format}", "json", $resourcePath);
      $method = "DELETE";
      $httpBody = '';
      $queryParams = array();
      $headerParams = array();
      $formParams = array();

      $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
      if (!is_null($_header_accept)) {
        $headerParams['Accept'] = $_header_accept;
      }
      $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

      

      

      $resourcePath = $this->apiClient->parsePathParam($resourcePath, $options, 'account_id', 'accountId');
      $resourcePath = $this->apiClient->parsePathParam($resourcePath, $options, 'extension_id', 'extensionId');
      $resourcePath = $this->apiClient->parsePathParam($resourcePath, $options, 'message_id', 'messageId');
      

      

      

      // for model (json/xml)
      if (isset($_tempBody)) {
        $httpBody = $_tempBody; // $_tempBody is the method argument, if present
      } else if (count($formParams) > 0) {
        // for HTTP post (form)
        $httpBody = $formParams;
      }

      // authentication setting, if any
      $authSettings = array();

      // make the API Call
      $response = $this->apiClient->callAPI($resourcePath, $method,
                                            $queryParams, $httpBody,
                                            $headerParams, $authSettings);

      if(! $response) {
        return null;
      }

      $responseObject = $this->apiClient->deserialize($response,'GetMessageInfoResponse');
      return $responseObject;

  }
  
  /**
   * Get Message Attachment
   *
   * @param `Options` $options Options object
   *
   * @struct Options {
   *     @type string  'account_id'  Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
   *     @type string  'extension_id'  Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
   *     @type int  'attachment_id'  Internal identifier of a message attachment (required)
   *     @type int  'message_id'  Internal identifier of a message (required)
   * }
   *
   * @return \RC\client\models\GetMessageInfoResponse
   */
   //public function accountExtensionMessageStoreContent($account_id, $extension_id, $attachment_id, $message_id) {
   public function accountExtensionMessageStoreContent($options) {

      if (empty($options)) $options = [];

      
      // verify the required parameter 'account_id' is set
      $this->apiClient->validateParameter($options, 'account_id', 'accountExtensionMessageStoreContent');
      
      // verify the required parameter 'extension_id' is set
      $this->apiClient->validateParameter($options, 'extension_id', 'accountExtensionMessageStoreContent');
      
      // verify the required parameter 'attachment_id' is set
      $this->apiClient->validateParameter($options, 'attachment_id', 'accountExtensionMessageStoreContent');
      
      // verify the required parameter 'message_id' is set
      $this->apiClient->validateParameter($options, 'message_id', 'accountExtensionMessageStoreContent');
      

      // parse inputs
      $resourcePath = "/v1.0/account/{accountId}/extension/{extensionId}/message-store/{messageId}/content/{attachmentId}";
      $resourcePath = str_replace("{format}", "json", $resourcePath);
      $method = "GET";
      $httpBody = '';
      $queryParams = array();
      $headerParams = array();
      $formParams = array();

      $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
      if (!is_null($_header_accept)) {
        $headerParams['Accept'] = $_header_accept;
      }
      $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

      

      

      $resourcePath = $this->apiClient->parsePathParam($resourcePath, $options, 'account_id', 'accountId');
      $resourcePath = $this->apiClient->parsePathParam($resourcePath, $options, 'extension_id', 'extensionId');
      $resourcePath = $this->apiClient->parsePathParam($resourcePath, $options, 'attachment_id', 'attachmentId');
      $resourcePath = $this->apiClient->parsePathParam($resourcePath, $options, 'message_id', 'messageId');
      

      

      

      // for model (json/xml)
      if (isset($_tempBody)) {
        $httpBody = $_tempBody; // $_tempBody is the method argument, if present
      } else if (count($formParams) > 0) {
        // for HTTP post (form)
        $httpBody = $formParams;
      }

      // authentication setting, if any
      $authSettings = array();

      // make the API Call
      $response = $this->apiClient->callAPI($resourcePath, $method,
                                            $queryParams, $httpBody,
                                            $headerParams, $authSettings);

      if(! $response) {
        return null;
      }

      $responseObject = $this->apiClient->deserialize($response,'GetMessageInfoResponse');
      return $responseObject;

  }
  
  /**
   * Create SMS Message
   *
   * @param `Options` $options Options object
   *
   * @struct Options {
   *     @type string  'account_id'  Internal identifier of a RingCentral account or tilde (~) to indicate the account logged-in within the current session (required)
   *     @type string  'extension_id'  Internal identifier of an extension or tilde (~) to indicate the extension assigned to the account logged-in within the current session (required)
   *     @type CreateSMSMessage  'body'  JSON body (required)
   * }
   *
   * @return \RC\client\models\GetMessageInfoResponse
   */
   //public function accountExtensionSmsPost($account_id, $extension_id, $body) {
   public function accountExtensionSmsPost($options) {

      if (empty($options)) $options = [];

      
      // verify the required parameter 'account_id' is set
      $this->apiClient->validateParameter($options, 'account_id', 'accountExtensionSmsPost');
      
      // verify the required parameter 'extension_id' is set
      $this->apiClient->validateParameter($options, 'extension_id', 'accountExtensionSmsPost');
      
      // verify the required parameter 'body' is set
      $this->apiClient->validateParameter($options, 'body', 'accountExtensionSmsPost');
      

      // parse inputs
      $resourcePath = "/v1.0/account/{accountId}/extension/{extensionId}/sms";
      $resourcePath = str_replace("{format}", "json", $resourcePath);
      $method = "POST";
      $httpBody = '';
      $queryParams = array();
      $headerParams = array();
      $formParams = array();

      $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
      if (!is_null($_header_accept)) {
        $headerParams['Accept'] = $_header_accept;
      }
      $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

      

      

      $resourcePath = $this->apiClient->parsePathParam($resourcePath, $options, 'account_id', 'accountId');
      $resourcePath = $this->apiClient->parsePathParam($resourcePath, $options, 'extension_id', 'extensionId');
      

      

      // body params
      $_tempBody = null;
      if (isset($body)) {
        $_tempBody = $body;
      }

      // for model (json/xml)
      if (isset($_tempBody)) {
        $httpBody = $_tempBody; // $_tempBody is the method argument, if present
      } else if (count($formParams) > 0) {
        // for HTTP post (form)
        $httpBody = $formParams;
      }

      // authentication setting, if any
      $authSettings = array();

      // make the API Call
      $response = $this->apiClient->callAPI($resourcePath, $method,
                                            $queryParams, $httpBody,
                                            $headerParams, $authSettings);

      if(! $response) {
        return null;
      }

      $responseObject = $this->apiClient->deserialize($response,'GetMessageInfoResponse');
      return $responseObject;

  }
  

}
